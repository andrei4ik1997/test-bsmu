export const eslintRules = {
	'class-methods-use-this': 'off',
	'no-useless-return': 'error',
	'no-sequences': 'error',
	'no-multi-assign': 'error',
	'no-useless-constructor': 'off',
	'no-self-compare': 'error',
	'no-promise-executor-return': 'error',
	'no-constructor-return': 'error',
	'default-case-last': 'error',
	'default-case': 'error',
	'no-useless-assignment': 'error',
	'no-template-curly-in-string': 'error',
	'simple-import-sort/imports': 'error',
	'simple-import-sort/exports': 'error',
	'no-restricted-globals': [
		'error',
		{
			name: 'setInterval',
			message: 'Avoid using timers. Use `interval` from rxjs instead.',
		},
		{
			name: 'setTimeout',
			message: 'Avoid using timers. Use `timer` from rxjs instead.',
		},
	],
	'no-restricted-properties': [
		'error',
		{
			object: 'window',
			property: 'setInterval',
			message: 'Avoid using timers. Use `interval` from rxjs instead.',
		},
		{
			object: 'window',
			property: 'setTimeout',
			message: 'Avoid using timers. Use `timer` from rxjs instead.',
		},
	],
	'prefer-template': 'error',
	'vars-on-top': 'error',

	'no-useless-rename': [
		'error',
		{
			ignoreDestructuring: true,
			ignoreImport: false,
			ignoreExport: true,
		},
	],
	'no-invalid-this': 'error',
	'arrow-body-style': ['error', 'always'],
	camelcase: 'off',
	complexity: ['error', { max: 50 }],
	curly: ['error', 'all'],
	'dot-notation': 'off',
	eqeqeq: ['error', 'always'],
	'guard-for-in': 'error',
	'id-match': [
		'error',
		'^[a-zA-Z_0-9$]*$',
		{
			properties: true,
			ignoreDestructuring: false,
			onlyDeclarations: false,
		},
	],
	'max-classes-per-file': ['error', 1],
	'max-depth': ['error', 4],

	'max-lines-per-function': [
		'error',
		{
			max: 100,
			skipBlankLines: true,
			skipComments: true,
			IIFEs: true,
		},
	],
	'max-nested-callbacks': ['error', 10],
	'no-caller': 'error',
	'no-cond-assign': 'error',
	'no-param-reassign': ['error'],
	'no-constant-condition': 'error',
	'no-debugger': 'error',
	'no-empty-functions': 'off',
	'no-eval': 'error',
	'no-fallthrough': 'error',
	'no-unmodified-loop-condition': 'error',
	'no-negated-condition': 'error',
	'no-nested-ternary': 'error',
	'no-new-wrappers': 'error',
	'no-prototype-builtins': 'error',
	'no-redeclare': 'error',
	'no-restricted-exports': ['error'],
	'no-return-assign': ['error', 'always'],
	'no-self-assign': 'error',
	'no-shadow': 'off',
	'no-sparse-arrays': 'error',
	'no-throw-literal': 'error',
	'no-undef-init': 'error',
	'no-unneeded-ternary': 'error',
	'no-unsafe-finally': 'error',
	'no-unused-expressions': 'error',
	'no-unused-labels': 'error',
	'no-var': 'error',
	'object-shorthand': 'error',
	'one-var': [
		'error',
		{
			var: 'never',
			let: 'never',
			const: 'never',
		},
	],
	'prefer-const': 'error',
	'prefer-object-spread': 'error',
	'no-implicit-coercion': 'error',
	'no-loop-func': 'error',
	radix: 'off',
	'require-atomic-updates': 'error',
	'unicode-bom': 'error',
	'use-isnan': 'error',
	'valid-typeof': 'off',
	'prefer-arrow-callback': ['error', { allowNamedFunctions: true }],
	'no-implicit-globals': 'error',
	'no-implied-eval': 'error',
	'no-unused-vars': 'off',

	'func-style': [
		'error',
		'declaration',
		{
			allowArrowFunctions: true,
		},
	],
	'no-bitwise': 'error',
	'no-case-declarations': 'error',
	'no-console': [
		'error',
		{
			allow: ['info', 'assert', 'warn', 'error'],
		},
	],
	'no-empty': ['error', { allowEmptyCatch: true }],
	'no-irregular-whitespace': 'error',
	'no-void': ['error', { allowAsStatement: true }],
	'no-useless-concat': 'error',
	'no-useless-escape': 'error',
	'no-restricted-syntax': [
		'error',
		{
			message: 'Use `map(() => value)` instead of `mapTo(value)`, the operator is deprecated',
			selector: "CallExpression[callee.name='mapTo']",
		},
		{
			message: 'Use `FALSE_HANDLER` please instead of `() => false`',
			selector: "ArrowFunctionExpression[params.length=0][body.raw='false'][body.value='false']",
		},
		{
			message: 'Use `TRUE_HANDLER` please instead of `() => true`',
			selector: "ArrowFunctionExpression[params.length=0][body.raw='true'][body.value='true']",
		},
		{
			message: 'Use `switchMap(() => stream$)` instead of `switchMapTo(stream$)`, the operator is deprecated',
			selector: "CallExpression[callee.name='switchMapTo']",
		},
		{
			message: 'Use `mergeMap` instead of `flatMap`, the operator is deprecated',
			selector: "CallExpression[callee.name='flatMap']",
		},
		{
			message: "Use `map(x => x?.foo?.bar)` instead of `pluck('foo', 'bar')`",
			selector: "CallExpression[callee.name='pluck']",
		},
		{
			message:
				'Provide initial value to .reduce() method. Possible runtime error: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Reduce_of_empty_array_with_no_initial_value',
			selector:
				"CallExpression[arguments.length=1] > MemberExpression.callee > Identifier.property[name='reduce']",
		},
	],
};
