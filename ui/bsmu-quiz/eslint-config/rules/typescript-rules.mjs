export const typescriptRules = {
	'no-invalid-this': 'off',
	'@typescript-eslint/no-invalid-this': 'error',
	'@typescript-eslint/method-signature-style': ['error', 'method'],
	'class-methods-use-this': 'off',
	'@typescript-eslint/class-methods-use-this': 'off',
	'@typescript-eslint/strict-boolean-expressions': [
		'error',
		{
			allowString: false,
			allowNumber: false,
			allowNullableObject: false,
			allowNullableBoolean: false,
			allowNullableString: false,
			allowNullableNumber: false,
			allowNullableEnum: false,
			allowAny: false,
			allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing: false,
		},
	],
	'@typescript-eslint/typedef': [
		'error',
		{
			arrayDestructuring: false,
			arrowParameter: false,
			memberVariableDeclaration: false,
			objectDestructuring: false,
			parameter: true,
			propertyDeclaration: true,
			variableDeclaration: false,
			variableDeclarationIgnoreFunction: false,
		},
	],
	'max-params': 'off',
	'@typescript-eslint/max-params': ['error', { max: 4 }],
	'no-loop-func': 'off',
	'@typescript-eslint/no-loop-func': 'error',
	'no-magic-numbers': 'off',
	'@typescript-eslint/no-magic-numbers': 'off',
	'default-param-last': 'off',
	'@typescript-eslint/default-param-last': 'error',
	'@typescript-eslint/no-useless-empty-export': 'error',
	'@typescript-eslint/no-restricted-imports': [
		'error',
		{
			patterns: [
				{
					group: ['rxjs/operators'],
					message: "Don't use 'rxjs/operators' instead of 'rxjs'",
				},
			],
		},
	],
	'init-declarations': 'off',
	'@typescript-eslint/init-declarations': 'error',
	'no-dupe-class-members': 'off',
	'@typescript-eslint/no-dupe-class-members': 'error',
	'@typescript-eslint/array-type': ['error', { default: 'array-simple', readonly: 'array-simple' }],
	'@typescript-eslint/prefer-enum-initializers': 'error',
	'@typescript-eslint/await-thenable': 'error',
	'@typescript-eslint/ban-ts-comment': 'error',
	'@typescript-eslint/consistent-generic-constructors': 'error',
	'@typescript-eslint/consistent-indexed-object-style': 'error',
	'@typescript-eslint/consistent-type-assertions': [
		'error',
		{
			assertionStyle: 'as',
			objectLiteralTypeAssertions: 'allow-as-parameter',
		},
	],
	'@typescript-eslint/consistent-type-definitions': ['error', 'type'],
	'@typescript-eslint/consistent-type-imports': [
		'error',
		{
			disallowTypeAnnotations: false,
			fixStyle: 'separate-type-imports',
			prefer: 'type-imports',
		},
	],
	'@typescript-eslint/dot-notation': [
		'error',
		{
			allowIndexSignaturePropertyAccess: true,
			allowPrivateClassPropertyAccess: true,
			allowProtectedClassPropertyAccess: true,
		},
	],
	'@typescript-eslint/explicit-function-return-type': [
		'error',
		{
			allowConciseArrowFunctionExpressionsStartingWithVoid: true,
			allowDirectConstAssertionInArrowFunctions: true,
			allowExpressions: true,
			allowHigherOrderFunctions: true,
			allowTypedFunctionExpressions: true,
		},
	],
	'@typescript-eslint/explicit-member-accessibility': [
		'error',
		{
			accessibility: 'explicit',
			overrides: {
				accessors: 'explicit',
				constructors: 'no-public',
				methods: 'explicit',
				parameterProperties: 'explicit',
				properties: 'explicit',
			},
		},
	],
	'@typescript-eslint/no-confusing-non-null-assertion': 'error',
	'@typescript-eslint/no-duplicate-enum-values': 'error',
	'@typescript-eslint/no-duplicate-type-constituents': 'error',
	'@typescript-eslint/no-empty-function': [
		'error',
		{
			allow: [
				'constructors',
				'methods',
				'arrowFunctions',
				'private-constructors',
				'protected-constructors',
				'overrideMethods',
				'decoratedFunctions',
			],
		},
	],
	'@typescript-eslint/no-extra-non-null-assertion': 'error',
	'@typescript-eslint/no-extraneous-class': [
		'error',
		{
			allowConstructorOnly: true,
			allowEmpty: false,
			allowStaticOnly: true,
			allowWithDecorator: true,
		},
	],
	'@typescript-eslint/no-floating-promises': ['error', { ignoreIIFE: true, ignoreVoid: true }],
	'@typescript-eslint/no-for-in-array': 'error',
	'@typescript-eslint/no-implied-eval': 'error',
	'@typescript-eslint/no-inferrable-types': [
		'error',
		{
			ignoreParameters: true,
			ignoreProperties: false,
		},
	],
	'@typescript-eslint/no-namespace': ['error', { allowDeclarations: true }],
	'@typescript-eslint/no-non-null-asserted-optional-chain': 'error',
	'@typescript-eslint/no-shadow': 'error',
	'@typescript-eslint/no-unnecessary-boolean-literal-compare': 'error',
	'@typescript-eslint/no-unnecessary-qualifier': 'error',
	'@typescript-eslint/no-unnecessary-type-arguments': 'error',
	'@typescript-eslint/no-unnecessary-type-assertion': 'error',
	'@typescript-eslint/no-unnecessary-type-constraint': 'error',
	'@typescript-eslint/no-unsafe-declaration-merging': 'error',
	'no-unused-expressions': 'off',
	'@typescript-eslint/no-unused-expressions': [
		'error',
		{
			allowShortCircuit: true,
			allowTernary: true,
		},
	],
	'@typescript-eslint/no-unused-vars': [
		'error',
		{
			args: 'all',
			argsIgnorePattern: '^_',
			caughtErrors: 'all',
			caughtErrorsIgnorePattern: '^_',
			destructuredArrayIgnorePattern: '^_',
			varsIgnorePattern: '^_',
			ignoreRestSiblings: true,
		},
	],
	'no-use-before-define': 'off',
	'@typescript-eslint/no-use-before-define': [
		'error',
		{
			allowNamedExports: false,
			classes: false,
			enums: true,
			functions: false,
			ignoreTypeReferences: true,
			typedefs: true,
			variables: true,
		},
	],
	'@typescript-eslint/no-useless-constructor': 'error',
	'@typescript-eslint/no-require-imports': 'error',
	'@typescript-eslint/prefer-as-const': 'error',
	'@typescript-eslint/prefer-find': 'error',
	'@typescript-eslint/prefer-for-of': 'error',
	'@typescript-eslint/prefer-includes': 'error',
	'@typescript-eslint/prefer-nullish-coalescing': 'error',
	'@typescript-eslint/prefer-optional-chain': 'error',
	'@typescript-eslint/prefer-readonly': ['error'],
	'@typescript-eslint/prefer-string-starts-ends-with': 'error',
	'@typescript-eslint/promise-function-async': [
		'error',
		{
			allowedPromiseNames: ['Thenable'],
			checkArrowFunctions: true,
			checkFunctionDeclarations: true,
			checkFunctionExpressions: true,
			checkMethodDeclarations: true,
		},
	],
	'@typescript-eslint/require-array-sort-compare': 'error',
	'@typescript-eslint/require-await': 'error',
	'@typescript-eslint/restrict-plus-operands': [
		'error',
		{
			allowAny: true,
			allowBoolean: false,
			allowNullish: false,
			allowNumberAndString: false,
			allowRegExp: false,
		},
	],
	'@typescript-eslint/sort-type-constituents': 'error',
	'@typescript-eslint/switch-exhaustiveness-check': [
		'error',
		{
			allowDefaultCaseForExhaustiveSwitch: true,
			considerDefaultExhaustiveForUnions: true,
			requireDefaultForNonUnion: false,
		},
	],
	'@typescript-eslint/restrict-template-expressions': [
		'error',
		{
			allowAny: false,
			allowBoolean: false,
			allowNullish: false,
			allowNumber: true,
			allowRegExp: false,
			allowNever: false,
		},
	],
	'@typescript-eslint/triple-slash-reference': [
		'error',
		{
			lib: 'always',
			path: 'always',
			types: 'always',
		},
	],
	'@typescript-eslint/no-empty-object-type': 'error',
	'@typescript-eslint/no-unsafe-function-type': 'error',
	'@typescript-eslint/no-wrapper-object-types': 'error',
	'@typescript-eslint/member-ordering': [
		'off',
		{
			default: [
				'signature',
				'readonly-signature',
				'public-static-field',
				'protected-static-field',
				'#private-static-field',
				'private-static-field',
				'public-abstract-field',
				'protected-abstract-field',
				'private-decorated-field',
				'private-instance-field',
				'#private-instance-field',
				'public-decorated-field',
				'public-instance-field',
				'protected-decorated-field',
				'protected-instance-field',
				'public-constructor',
				'protected-constructor',
				'private-constructor',
				'public-static-method',
				'protected-static-method',
				'private-static-method',
				'#private-static-method',
				'public-abstract-get',
				'public-abstract-set',
				'protected-abstract-get',
				'protected-abstract-set',
				'public-abstract-method',
				'protected-abstract-method',
				['public-decorated-set', 'public-decorated-get'],
				['public-set', 'public-get'],
				'public-decorated-method',
				'public-instance-method',
				['protected-decorated-set', 'protected-decorated-get'],
				['protected-set', 'protected-get'],
				'protected-decorated-method',
				'protected-instance-method',
				['private-decorated-set', 'private-decorated-get'],
				['private-set', 'private-get'],
				'private-decorated-method',
				'private-instance-method',
				'#private-instance-method',
			],
		},
	],
	'@typescript-eslint/no-unnecessary-type-parameters': 'off',
	'@typescript-eslint/no-deprecated': 'error',
	'@typescript-eslint/unbound-method': 'off',
	'@typescript-eslint/no-invalid-void-type': 'off',
	'@typescript-eslint/no-unsafe-assignment': 'warn',
	'@typescript-eslint/no-explicit-any': 'warn',
};
